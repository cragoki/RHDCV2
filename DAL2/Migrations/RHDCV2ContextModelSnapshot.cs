// <auto-generated />
using System;
using DAL.DbRHDCV2Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(RHDCV2Context))]
    partial class RHDCV2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateLogged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tb_alert");
                });

            modelBuilder.Entity("DAL.Entities.Algorithm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AlgorithmType")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tb_algorithm");
                });

            modelBuilder.Entity("DAL.Entities.AlgorithmExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AlgorithmId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfRaces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmId");

                    b.ToTable("tb_algorithm_execution");
                });

            modelBuilder.Entity("DAL.Entities.AlgorithmVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlgorithmId")
                        .HasColumnType("int");

                    b.Property<int>("ClassLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeAllWeather")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmId");

                    b.ToTable("tb_algorithm_variable");
                });

            modelBuilder.Entity("DAL.Entities.AutoRetrieverLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRetrieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Retries")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tb_auto_retriever_log");
                });

            modelBuilder.Entity("DAL.Entities.DaysEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("RaceCourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceCourseId");

                    b.ToTable("tb_event");
                });

            modelBuilder.Entity("DAL.Entities.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErrorType")
                        .HasColumnType("int");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.Property<string>("Stacktrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_error_log");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.AgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_age_category");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.AttireCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("tb_attire_category");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.DistanceBetweenCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("tb_distance_between_category");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.DistanceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_distance_category");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.GoingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_going_category");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.Horse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_horse");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.Jockey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_jockey");
                });

            modelBuilder.Entity("DAL.Entities.MappingTables.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tb_trainer");
                });

            modelBuilder.Entity("DAL.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Abandoned")
                        .HasColumnType("bit");

                    b.Property<int>("AgeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("DistanceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventEntityId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("GoingCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RaceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RaceType")
                        .HasColumnType("int");

                    b.Property<string>("RaceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("DistanceCategoryId");

                    b.HasIndex("EventEntityId");

                    b.HasIndex("GoingCategoryId");

                    b.ToTable("tb_race");
                });

            modelBuilder.Entity("DAL.Entities.RaceCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAllWeather")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SpeedType")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tb_race_course");
                });

            modelBuilder.Entity("DAL.Entities.RaceHorse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AttireCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceBetweenCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("HorseId")
                        .HasColumnType("int");

                    b.Property<int>("JockeyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Odds")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Time")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("AttireCategoryId");

                    b.HasIndex("DistanceBetweenCategoryId");

                    b.HasIndex("HorseId");

                    b.HasIndex("JockeyId");

                    b.HasIndex("RaceId");

                    b.HasIndex("TrainerId");

                    b.ToTable("tb_race_horse");
                });

            modelBuilder.Entity("DAL.Entities.WorkerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Start")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tb_worker_service");
                });

            modelBuilder.Entity("DAL.Entities.AlgorithmExecution", b =>
                {
                    b.HasOne("DAL.Entities.Algorithm", "AlgorithmEntity")
                        .WithMany()
                        .HasForeignKey("AlgorithmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlgorithmEntity");
                });

            modelBuilder.Entity("DAL.Entities.AlgorithmVariable", b =>
                {
                    b.HasOne("DAL.Entities.Algorithm", "AlgorithmEntity")
                        .WithMany()
                        .HasForeignKey("AlgorithmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlgorithmEntity");
                });

            modelBuilder.Entity("DAL.Entities.DaysEvent", b =>
                {
                    b.HasOne("DAL.Entities.RaceCourse", "RaceCourse")
                        .WithMany()
                        .HasForeignKey("RaceCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceCourse");
                });

            modelBuilder.Entity("DAL.Entities.Race", b =>
                {
                    b.HasOne("DAL.Entities.MappingTables.AgeCategory", "AgeCategoryEntity")
                        .WithMany()
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.MappingTables.DistanceCategory", "DistanceCategoryEntity")
                        .WithMany()
                        .HasForeignKey("DistanceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.DaysEvent", "EventEntity")
                        .WithMany()
                        .HasForeignKey("EventEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.MappingTables.GoingCategory", "GoingCategoryEntity")
                        .WithMany()
                        .HasForeignKey("GoingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeCategoryEntity");

                    b.Navigation("DistanceCategoryEntity");

                    b.Navigation("EventEntity");

                    b.Navigation("GoingCategoryEntity");
                });

            modelBuilder.Entity("DAL.Entities.RaceHorse", b =>
                {
                    b.HasOne("DAL.Entities.MappingTables.AttireCategory", "AttireCategoryEntity")
                        .WithMany()
                        .HasForeignKey("AttireCategoryId");

                    b.HasOne("DAL.Entities.MappingTables.DistanceBetweenCategory", "DistanceBetweenCategoryEntity")
                        .WithMany()
                        .HasForeignKey("DistanceBetweenCategoryId");

                    b.HasOne("DAL.Entities.MappingTables.Horse", "HorseEntity")
                        .WithMany()
                        .HasForeignKey("HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.MappingTables.Jockey", "JockeyEntity")
                        .WithMany()
                        .HasForeignKey("JockeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Race", "RaceEntity")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.MappingTables.Trainer", "TrainerEntity")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttireCategoryEntity");

                    b.Navigation("DistanceBetweenCategoryEntity");

                    b.Navigation("HorseEntity");

                    b.Navigation("JockeyEntity");

                    b.Navigation("RaceEntity");

                    b.Navigation("TrainerEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
